<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>QRcanva - Professional QR Generator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * { 
            font-family: 'Inter', sans-serif;
            -webkit-overflow-scrolling: touch;
        }
        
        html, body {
            overflow-x: hidden;
            height: 100%;
        }
        
        body {
            margin: 0;
            padding: 0;
        }
        
        .app-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        main {
            flex: 1;
            overflow-y: auto;
            padding-bottom: 120px;
        }
        
        .light-blue-bg {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        }
        
        .light-green-bg {
            background: linear-gradient(135deg, #d4fc79 0%, #96e6a1 100%);
        }
        
        .light-gray-bg {
            background: linear-gradient(135deg, #e0e0e0 0%, #f5f5f5 100%);
        }
        
        .sidebar {
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            background: linear-gradient(135deg, #e0f2fe 0%, #bae6fd 50%, #7dd3fc 100%);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .sidebar:hover {
            transform: translateX(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }
        
        .sidebar.collapsed {
            transform: translateX(-100%);
        }
        
        .sidebar-toggle {
            position: absolute;
            right: -20px;
            top: 20px;
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #60a5fa 0%, #34d399 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            z-index: 10;
        }
        
        .sidebar-toggle:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        }
        
        .mobile-sidebar-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 56px;
            height: 56px;
            background: linear-gradient(135deg, #60a5fa 0%, #34d399 100%);
            border-radius: 50%;
            display: none;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            z-index: 50;
        }
        
        .tool-card {
            transition: all 0.3s ease;
            border: 2px solid transparent;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            position: relative;
            overflow: hidden;
        }
        
        .tool-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.5s ease;
        }
        
        .tool-card:hover::before {
            left: 100%;
        }
        
        .tool-card:hover {
            transform: translateY(-5px) scale(1.02);
            border-color: #60a5fa;
            box-shadow: 0 15px 30px rgba(96, 165, 250, 0.2);
            background: rgba(255, 255, 255, 0.95);
        }
        
        .active-tool {
            background: linear-gradient(135deg, #60a5fa 0%, #34d399 100%);
            color: white;
            border-color: #60a5fa;
            box-shadow: 0 8px 25px rgba(96, 165, 250, 0.3);
        }
        
        .tool-icon {
            width: 40px;
            height: 40px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            margin-bottom: 8px;
            transition: all 0.3s ease;
        }
        
        .active-tool .tool-icon {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .qr-canvas {
            transition: all 0.3s ease;
        }
        
        .qr-canvas:hover {
            transform: scale(1.02);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #60a5fa 0%, #34d399 100%);
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(96, 165, 250, 0.3);
        }
        
        .theme-btn {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .theme-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            transform: translate(-50%, -50%);
            transition: width 0.3s, height 0.3s;
        }
        
        .theme-btn:hover::before {
            width: 100%;
            height: 100%;
        }
        
        .theme-btn.active {
            background: linear-gradient(135deg, #60a5fa 0%, #34d399 100%);
            color: white;
        }
        
        .color-swatch {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 3px solid transparent;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .color-swatch:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        .color-swatch.selected {
            border-color: #60a5fa;
            box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.2);
        }
        
        .ad-space {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 2s infinite;
            border-radius: 12px;
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        @keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }
        
        .floating-shapes {
            position: absolute;
            opacity: 0.1;
            animation: float 15s infinite ease-in-out;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }
        
        .file-upload-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }
        
        .file-upload-wrapper input[type=file] {
            position: absolute;
            left: -9999px;
        }
        
        .file-upload-label {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 12px 20px;
            background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
            border: 2px dashed #d1d5db;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-height: 60px;
        }
        
        .file-upload-label:hover {
            background: linear-gradient(135deg, #e5e7eb 0%, #d1d5db 100%);
            border-color: #9ca3af;
        }
        
        .file-upload-label.has-file {
            background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
            border-color: #10b981;
            border-style: solid;
        }
        
        /* Dark mode styles */
        .dark {
            background-color: #111827;
            color: #f9fafb;
        }
        
        .dark .bg-white {
            background-color: #1f2937 !important;
        }
        
        .dark .bg-gray-50 {
            background-color: #1f2937 !important;
        }
        
        .dark .bg-gray-100 {
            background-color: #374151 !important;
        }
        
        .dark .bg-gray-200 {
            background-color: #4b5563 !important;
        }
        
        .dark .text-gray-800 {
            color: #f9fafb !important;
        }
        
        .dark .text-gray-700 {
            color: #f3f4f6 !important;
        }
        
        .dark .text-gray-600 {
            color: #d1d5db !important;
        }
        
        .dark .text-gray-500 {
            color: #9ca3af !important;
        }
        
        .dark .text-gray-400 {
            color: #6b7280 !important;
        }
        
        .dark .border-gray-200 {
            border-color: #4b5563 !important;
        }
        
        .dark .border-gray-300 {
            border-color: #4b5563 !important;
        }
        
        .dark .border-gray-600 {
            border-color: #4b5563 !important;
        }
        
        .dark .border-gray-700 {
            border-color: #374151 !important;
        }
        
        .dark .sidebar {
            background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 50%, #2563eb 100%);
        }
        
        .dark .tool-card {
            background: rgba(31, 41, 55, 0.9);
        }
        
        .dark .tool-card:hover {
            background: rgba(31, 41, 55, 0.95);
        }
        
        .dark .tool-icon {
            background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 100%);
        }
        
        .dark .active-tool .tool-icon {
            background: rgba(255, 255, 255, 0.2);
        }
        
        .dark .light-blue-bg {
            background: linear-gradient(135deg, #1e3a8a 0%, #1e1b4b 100%);
        }
        
        .dark .light-green-bg {
            background: linear-gradient(135deg, #14532d 0%, #064e3b 100%);
        }
        
        .dark .light-gray-bg {
            background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
        }
        
        .dark .file-upload-label {
            background: linear-gradient(135deg, #374151 0%, #1f2937 100%);
            border-color: #4b5563;
        }
        
        .dark .file-upload-label:hover {
            background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
            border-color: #6b7280;
        }
        
        .dark .ad-space {
            background: linear-gradient(90deg, #374151 25%, #1f2937 50%, #374151 75%);
        }
        
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                left: 0;
                top: 0;
                height: 100vh;
                z-index: 40;
                transform: translateX(-100%);
            }
            
            .sidebar.open {
                transform: translateX(0);
            }
            
            .mobile-sidebar-toggle {
                display: flex;
            }
            
            .sidebar-toggle {
                display: none;
            }
            
            .ad-space {
                height: 60px !important;
            }
            
            .tool-card {
                padding: 12px;
            }
            
            .tool-icon {
                width: 32px;
                height: 32px;
                margin-bottom: 6px;
            }
        }
    </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
    <div class="app-container">
        <!-- Floating Shapes Background -->
        <div class="fixed inset-0 overflow-hidden pointer-events-none">
            <div class="floating-shapes w-64 h-64 bg-blue-400 rounded-full top-10 left-10"></div>
            <div class="floating-shapes w-96 h-96 bg-green-400 rounded-full bottom-10 right-10" style="animation-delay: 5s;"></div>
            <div class="floating-shapes w-80 h-80 bg-gray-400 rounded-full top-1/2 left-1/2" style="animation-delay: 10s;"></div>
        </div>

        <!-- Header -->
        <header class="fixed top-0 w-full z-30 bg-white/80 dark:bg-gray-800/80 backdrop-blur-lg shadow-sm">
            <div class="container mx-auto px-4 py-4 flex justify-between items-center">
                <div class="flex items-center space-x-3">
                    <button id="mobileMenuToggle" class="md:hidden p-2 rounded-lg bg-gray-100 dark:bg-gray-700">
                        <i class="fas fa-bars text-gray-600 dark:text-gray-300"></i>
                    </button>
                    <div class="w-10 h-10 bg-gradient-to-br from-blue-400 to-green-400 rounded-xl flex items-center justify-center">
                        <i class="fas fa-qrcode text-white text-xl"></i>
                    </div>
                    <h1 class="text-2xl font-bold bg-gradient-to-r from-blue-400 to-green-400 bg-clip-text text-transparent">QRcanva</h1>
                </div>
                <div class="flex items-center space-x-2">
                    <button onclick="setTheme('light')" id="lightBtn" class="theme-btn p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition">
                        <i class="fas fa-sun text-gray-600 dark:text-gray-300"></i>
                    </button>
                    <button onclick="setTheme('dark')" id="darkBtn" class="theme-btn p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition">
                        <i class="fas fa-moon text-gray-600 dark:text-gray-300"></i>
                    </button>
                    <button onclick="setTheme('system')" id="systemBtn" class="theme-btn p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition">
                        <i class="fas fa-desktop text-gray-600 dark:text-gray-300"></i>
                    </button>
                </div>
            </div>
        </header>

        <!-- AdSpace Top Banner -->
        <div class="pt-20">
            <div class="container mx-auto px-4 py-4">
                <div class="ad-space h-20 flex items-center justify-center text-gray-500 dark:text-gray-400">
                    <i class="fas fa-ad mr-2"></i> AdSpace - Top Banner (728x90)
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <main class="flex pt-4">
            <!-- Animated Sidebar -->
            <aside id="sidebar" class="sidebar w-64 shadow-xl h-screen sticky top-20 overflow-y-auto relative">
                <div class="p-6">
                    <!-- Desktop Sidebar Toggle Button -->
                    <button id="desktopSidebarToggle" class="sidebar-toggle hidden md:block">
                        <i class="fas fa-chevron-left" id="toggleIcon"></i>
                    </button>
                    
                    <!-- Mobile Close Button -->
                    <button id="mobileCloseSidebar" class="md:hidden absolute top-4 right-4 p-2 rounded-lg bg-white/20 backdrop-blur-sm">
                        <i class="fas fa-times text-white"></i>
                    </button>
                    
                    <h2 class="text-xl font-bold text-gray-800 dark:text-white mb-6 flex items-center">
                        <i class="fas fa-magic mr-2"></i>
                        QR Tools
                    </h2>
                    
                    <div class="space-y-3">
                        <div class="sidebar-item p-4 rounded-xl cursor-pointer tool-card active-tool" onclick="selectTool('basic')">
                            <div class="flex flex-col items-center">
                                <div class="tool-icon">
                                    <i class="fas fa-qrcode text-blue-600 text-xl"></i>
                                </div>
                                <span class="font-semibold text-gray-800 dark:text-white">Basic QR</span>
                            </div>
                        </div>
                        <div class="sidebar-item p-4 rounded-xl cursor-pointer tool-card" onclick="selectTool('colorful')">
                            <div class="flex flex-col items-center">
                                <div class="tool-icon">
                                    <i class="fas fa-palette text-pink-600 text-xl"></i>
                                </div>
                                <span class="font-semibold text-gray-800 dark:text-white">Colorful QR</span>
                            </div>
                        </div>
                        <div class="sidebar-item p-4 rounded-xl cursor-pointer tool-card" onclick="selectTool('gradient')">
                            <div class="flex flex-col items-center">
                                <div class="tool-icon">
                                    <i class="fas fa-fill-drip text-purple-600 text-xl"></i>
                                </div>
                                <span class="font-semibold text-gray-800 dark:text-white">Gradient QR</span>
                            </div>
                        </div>
                        <div class="sidebar-item p-4 rounded-xl cursor-pointer tool-card" onclick="selectTool('rounded')">
                            <div class="flex flex-col items-center">
                                <div class="tool-icon">
                                    <i class="fas fa-circle text-green-600 text-xl"></i>
                                </div>
                                <span class="font-semibold text-gray-800 dark:text-white">Rounded QR</span>
                            </div>
                        </div>
                        <div class="sidebar-item p-4 rounded-xl cursor-pointer tool-card" onclick="selectTool('dots')">
                            <div class="flex flex-col items-center">
                                <div class="tool-icon">
                                    <i class="fas fa-braille text-orange-600 text-xl"></i>
                                </div>
                                <span class="font-semibold text-gray-800 dark:text-white">Dots Style</span>
                            </div>
                        </div>
                        <div class="sidebar-item p-4 rounded-xl cursor-pointer tool-card" onclick="selectTool('logo')">
                            <div class="flex flex-col items-center">
                                <div class="tool-icon">
                                    <i class="fas fa-image text-red-600 text-xl"></i>
                                </div>
                                <span class="font-semibold text-gray-800 dark:text-white">With Logo</span>
                            </div>
                        </div>
                        <div class="sidebar-item p-4 rounded-xl cursor-pointer tool-card" onclick="selectTool('frame')">
                            <div class="flex flex-col items-center">
                                <div class="tool-icon">
                                    <i class="fas fa-border-style text-indigo-600 text-xl"></i>
                                </div>
                                <span class="font-semibold text-gray-800 dark:text-white">With Frame</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-8">
                        <h3 class="text-sm font-bold text-gray-700 dark:text-gray-300 mb-4 flex items-center">
                            <i class="fas fa-sliders-h mr-2"></i>
                            Quick Settings
                        </h3>
                        
                        <!-- Color Palette Bar -->
                        <div class="mb-6">
                            <label class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3 block">QR Color</label>
                            <div class="flex flex-wrap gap-2 mb-3">
                                <div class="color-swatch selected" style="background-color: #000000" onclick="selectColor('#000000', 'qr')"></div>
                                <div class="color-swatch" style="background-color: #ef4444" onclick="selectColor('#ef4444', 'qr')"></div>
                                <div class="color-swatch" style="background-color: #f59e0b" onclick="selectColor('#f59e0b', 'qr')"></div>
                                <div class="color-swatch" style="background-color: #10b981" onclick="selectColor('#10b981', 'qr')"></div>
                                <div class="color-swatch" style="background-color: #3b82f6" onclick="selectColor('#3b82f6', 'qr')"></div>
                                <div class="color-swatch" style="background-color: #8b5cf6" onclick="selectColor('#8b5cf6', 'qr')"></div>
                                <div class="color-swatch" style="background-color: #ec4899" onclick="selectColor('#ec4899', 'qr')"></div>
                                <div class="color-swatch" style="background-color: #6b7280" onclick="selectColor('#6b7280', 'qr')"></div>
                            </div>
                            <input type="color" id="qrColor" value="#000000" class="w-full h-10 rounded-lg cursor-pointer">
                        </div>
                        
                        <!-- Background Color Palette -->
                        <div class="mb-6">
                            <label class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3 block">Background</label>
                            <div class="flex flex-wrap gap-2 mb-3">
                                <div class="color-swatch selected" style="background-color: #FFFFFF" onclick="selectColor('#FFFFFF', 'bg')"></div>
                                <div class="color-swatch" style="background-color: #fef3c7" onclick="selectColor('#fef3c7', 'bg')"></div>
                                <div class="color-swatch" style="background-color: #dbeafe" onclick="selectColor('#dbeafe', 'bg')"></div>
                                <div class="color-swatch" style="background-color: #d1fae5" onclick="selectColor('#d1fae5', 'bg')"></div>
                                <div class="color-swatch" style="background-color: #fce7f3" onclick="selectColor('#fce7f3', 'bg')"></div>
                                <div class="color-swatch" style="background-color: #e9d5ff" onclick="selectColor('#e9d5ff', 'bg')"></div>
                                <div class="color-swatch" style="background-color: #fed7aa" onclick="selectColor('#fed7aa', 'bg')"></div>
                                <div class="color-swatch" style="background-color: #f3f4f6" onclick="selectColor('#f3f4f6', 'bg')"></div>
                            </div>
                            <input type="color" id="bgColor" value="#FFFFFF" class="w-full h-10 rounded-lg cursor-pointer">
                        </div>
                        
                        <!-- Size Slider -->
                        <div class="mb-6">
                            <label class="text-sm font-semibold text-gray-700 dark:text-gray-300">Size: <span id="sizeValue">200</span>px</label>
                            <input type="range" id="qrSize" min="100" max="400" value="200" class="w-full mt-2">
                        </div>
                        
                        <!-- Error Correction -->
                        <div class="mb-6">
                            <label class="text-sm font-semibold text-gray-700 dark:text-gray-300">Error Correction</label>
                            <select id="errorCorrection" class="w-full mt-2 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700">
                                <option value="L">Low (7%)</option>
                                <option value="M" selected>Medium (15%)</option>
                                <option value="Q">Quartile (25%)</option>
                                <option value="H">High (30%)</option>
                            </select>
                        </div>
                    </div>
                </div>
            </aside>

            <!-- Main Generator Area -->
            <section class="flex-1 p-4 md:p-8">
                <div class="max-w-4xl mx-auto">
                    <!-- Headlines Feature -->
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-6">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                            <i class="fas fa-heading mr-2 text-blue-500"></i>
                            Add Headline
                        </h3>
                        <input type="text" id="qrHeadline" placeholder="Enter headline text (optional)" 
                               class="w-full px-4 py-3 border-2 border-gray-200 dark:border-gray-600 rounded-xl focus:outline-none focus:border-blue-400 dark:bg-gray-700">
                    </div>

                    <!-- Logo Upload Feature -->
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-6">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                            <i class="fas fa-image mr-2 text-green-500"></i>
                            Add Logo (Optional)
                        </h3>
                        <div class="file-upload-wrapper">
                            <input type="file" id="logoUpload" accept="image/*">
                            <label for="logoUpload" class="file-upload-label" id="fileLabel">
                                <div class="text-center">
                                    <i class="fas fa-cloud-upload-alt text-3xl text-gray-400 mb-2"></i>
                                    <p class="text-gray-600 dark:text-gray-400 font-medium">Click to upload or drag and drop</p>
                                    <p class="text-sm text-gray-500 dark:text-gray-500 mt-1">PNG, JPG, GIF up to 10MB</p>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- Input Section -->
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-6">
                        <div class="flex flex-col md:flex-row gap-4">
                            <input type="text" id="qrInput" placeholder="Enter URL or text..." 
                                   class="flex-1 px-4 py-3 border-2 border-gray-200 dark:border-gray-600 rounded-xl focus:outline-none focus:border-blue-400 dark:bg-gray-700">
                            <button onclick="generateQR()" class="btn-primary px-8 py-3 text-white font-semibold rounded-xl">
                                <i class="fas fa-magic mr-2"></i>Generate QR
                            </button>
                        </div>
                    </div>

                    <!-- QR Display -->
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-8 mb-6">
                        <div class="text-center">
                            <!-- Headline Display -->
                            <div id="headlineDisplay" class="mb-6 hidden">
                                <h2 class="text-2xl font-bold text-gray-800 dark:text-white"></h2>
                            </div>
                            
                            <div id="qrContainer" class="inline-block qr-canvas p-6 bg-gray-50 dark:bg-gray-700 rounded-2xl">
                                <div id="qrDisplay" class="w-64 h-64 mx-auto flex items-center justify-center relative">
                                    <div class="text-center text-gray-400">
                                        <i class="fas fa-qrcode text-6xl mb-4"></i>
                                        <p>Your QR will appear here</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Export Options -->
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-6">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                            <i class="fas fa-download mr-2 text-purple-500"></i>
                            Export Options
                        </h3>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
                            <button onclick="exportQR('png')" class="px-4 py-3 bg-blue-100 text-blue-600 rounded-lg hover:bg-blue-200 transition">
                                <i class="fas fa-download mr-2"></i>PNG
                            </button>
                            <button onclick="exportQR('svg')" class="px-4 py-3 bg-green-100 text-green-600 rounded-lg hover:bg-green-200 transition">
                                <i class="fas fa-download mr-2"></i>SVG
                            </button>
                            <button onclick="exportQR('jpg')" class="px-4 py-3 bg-purple-100 text-purple-600 rounded-lg hover:bg-purple-200 transition">
                                <i class="fas fa-download mr-2"></i>JPG
                            </button>
                            <button onclick="copyQR()" class="px-4 py-3 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition">
                                <i class="fas fa-copy mr-2"></i>Copy
                            </button>
                        </div>
                    </div>

                    <!-- QR Statistics -->
                    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 mb-6">
                        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-4 flex items-center">
                            <i class="fas fa-chart-bar mr-2 text-purple-500"></i>
                            QR Statistics
                        </h3>
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-blue-600" id="charCount">0</div>
                                <div class="text-sm text-gray-600 dark:text-gray-400">Characters</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-green-600" id="moduleCount">0</div>
                                <div class="text-sm text-gray-600 dark:text-gray-400">Modules</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-600" id="version">1</div>
                                <div class="text-sm text-gray-600 dark:text-gray-400">Version</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-orange-600" id="scanCount">0</div>
                                <div class="text-sm text-gray-600 dark:text-gray-400">Scans</div>
                            </div>
                        </div>
                    </div>

                    <!-- AdSpace Bottom - Now Always Visible -->
                    <div class="mt-12 mb-8">
                        <div class="ad-space h-20 flex items-center justify-center text-gray-500 dark:text-gray-400">
                            <i class="fas fa-ad mr-2"></i> AdSpace - Bottom Banner (728x90)
                        </div>
                    </div>
                </div>
            </section>
        </main>

        <!-- Mobile Sidebar Toggle Button -->
        <button id="mobileSidebarToggle" class="mobile-sidebar-toggle">
            <i class="fas fa-bars text-xl"></i>
        </button>

        <!-- Overlay for mobile sidebar -->
        <div id="sidebarOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden" onclick="closeMobileSidebar()"></div>
    </div>

    <script>
        let currentTool = 'basic';
        let currentQR = null;
        let sidebarCollapsed = false;
        let generatedQRData = null;
        let uploadedLogo = null;
        let currentTheme = 'system';

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            checkDarkMode();
        });

        function setupEventListeners() {
            // Mobile sidebar toggles
            document.getElementById('mobileMenuToggle').addEventListener('click', openMobileSidebar);
            document.getElementById('mobileSidebarToggle').addEventListener('click', openMobileSidebar);
            document.getElementById('mobileCloseSidebar').addEventListener('click', closeMobileSidebar);
            
            // Desktop sidebar toggle
            const desktopToggle = document.getElementById('desktopSidebarToggle');
            if (desktopToggle) {
                desktopToggle.addEventListener('click', toggleSidebar);
            }
            
            // Color pickers
            document.getElementById('qrColor').addEventListener('input', (e) => {
                selectColor(e.target.value, 'qr');
            });
            
            document.getElementById('bgColor').addEventListener('input', (e) => {
                selectColor(e.target.value, 'bg');
            });
            
            // Size slider
            document.getElementById('qrSize').addEventListener('input', (e) => {
                document.getElementById('sizeValue').textContent = e.target.value;
            });
            
            // Logo upload
            document.getElementById('logoUpload').addEventListener('change', handleLogoUpload);
            
            // Input change listener for statistics
            document.getElementById('qrInput').addEventListener('input', updateStatistics);
        }

        function setTheme(theme) {
            currentTheme = theme;
            
            // Update button states
            document.querySelectorAll('.theme-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            if (theme === 'system') {
                localStorage.removeItem('darkMode');
                if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
                document.getElementById('systemBtn').classList.add('active');
            } else {
                localStorage.setItem('darkMode', theme === 'dark');
                if (theme === 'dark') {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
                
                if (theme === 'dark') {
                    document.getElementById('darkBtn').classList.add('active');
                } else {
                    document.getElementById('lightBtn').classList.add('active');
                }
            }
            
            // Apply theme to all elements
            applyThemeToAllElements();
            showNotification(`Theme changed to ${theme} mode`, 'success');
        }

        function applyThemeToAllElements() {
            const isDark = document.documentElement.classList.contains('dark');
            
            // Apply to all elements that need dark mode
            document.querySelectorAll('.bg-white, .bg-gray-50, .bg-gray-100, .bg-gray-200').forEach(el => {
                if (isDark) {
                    el.classList.add('dark-mode-applied');
                } else {
                    el.classList.remove('dark-mode-applied');
                }
            });
            
            // Force update of background colors
            document.body.style.backgroundColor = isDark ? '#111827' : '#f9fafb';
            
            // Update all text colors
            document.querySelectorAll('.text-gray-800, .text-gray-700, .text-gray-600, .text-gray-500, .text-gray-400').forEach(el => {
                if (isDark) {
                    el.style.color = '';
                } else {
                    el.style.color = '';
                }
            });
        }

        function handleLogoUpload(e) {
            const file = e.target.files[0];
            const fileLabel = document.getElementById('fileLabel');
            
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    uploadedLogo = event.target.result;
                    fileLabel.classList.add('has-file');
                    fileLabel.innerHTML = `
                        <div class="text-center">
                            <i class="fas fa-check-circle text-3xl text-green-500 mb-2"></i>
                            <p class="text-gray-700 dark:text-gray-300 font-medium">${file.name}</p>
                            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Click to change</p>
                        </div>
                    `;
                    showNotification('Logo uploaded successfully!', 'success');
                };
                reader.readAsDataURL(file);
            }
        }

        function openMobileSidebar() {
            document.getElementById('sidebar').classList.add('open');
            document.getElementById('sidebarOverlay').classList.remove('hidden');
        }

        function closeMobileSidebar() {
            document.getElementById('sidebar').classList.remove('open');
            document.getElementById('sidebarOverlay').classList.add('hidden');
        }

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const toggleIcon = document.getElementById('toggleIcon');
            
            sidebarCollapsed = !sidebarCollapsed;
            
            if (sidebarCollapsed) {
                sidebar.classList.add('collapsed');
                toggleIcon.classList.remove('fa-chevron-left');
                toggleIcon.classList.add('fa-chevron-right');
            } else {
                sidebar.classList.remove('collapsed');
                toggleIcon.classList.remove('fa-chevron-right');
                toggleIcon.classList.add('fa-chevron-left');
            }
        }

        function selectColor(color, type) {
            if (type === 'qr') {
                document.getElementById('qrColor').value = color;
                // Update selected swatch
                document.querySelectorAll('.color-swatch').forEach(swatch => {
                    if (swatch.style.backgroundColor === color || 
                        rgbToHex(swatch.style.backgroundColor) === color.toUpperCase()) {
                        swatch.classList.add('selected');
                    } else if (swatch.parentElement.parentElement.querySelector('label').textContent.includes('QR Color')) {
                        swatch.classList.remove('selected');
                    }
                });
            } else {
                document.getElementById('bgColor').value = color;
                // Update selected swatch
                document.querySelectorAll('.color-swatch').forEach(swatch => {
                    if (swatch.style.backgroundColor === color || 
                        rgbToHex(swatch.style.backgroundColor) === color.toUpperCase()) {
                        swatch.classList.add('selected');
                    } else if (swatch.parentElement.parentElement.querySelector('label').textContent.includes('Background')) {
                        swatch.classList.remove('selected');
                    }
                });
            }
        }

        function rgbToHex(rgb) {
            if (!rgb || rgb.indexOf('rgb') !== 0) return rgb;
            
            const values = rgb.match(/\d+/g);
            if (!values || values.length < 3) return rgb;
            
            const hex = '#' + values.slice(0, 3).map(x => {
                const hex = parseInt(x).toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            }).join('');
            
            return hex.toUpperCase();
        }

        function checkDarkMode() {
            const savedTheme = localStorage.getItem('darkMode');
            if (savedTheme === 'true') {
                document.documentElement.classList.add('dark');
                currentTheme = 'dark';
                document.getElementById('darkBtn').classList.add('active');
            } else if (savedTheme === 'false') {
                document.documentElement.classList.remove('dark');
                currentTheme = 'light';
                document.getElementById('lightBtn').classList.add('active');
            } else {
                // System preference
                if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
                currentTheme = 'system';
                document.getElementById('systemBtn').classList.add('active');
            }
            
            // Apply theme to all elements
            applyThemeToAllElements();
        }

        function selectTool(tool) {
            currentTool = tool;
            
            // Update UI
            document.querySelectorAll('.tool-card').forEach(card => {
                card.classList.remove('active-tool');
            });
            
            event.currentTarget.classList.add('active-tool');
            
            // Update background based on tool
            const mainSection = document.querySelector('section');
            mainSection.classList.remove('light-blue-bg', 'light-green-bg', 'light-gray-bg');
            
            switch(tool) {
                case 'basic':
                    mainSection.classList.add('light-gray-bg');
                    break;
                case 'colorful':
                    mainSection.classList.add('light-blue-bg');
                    break;
                case 'gradient':
                    mainSection.classList.add('light-green-bg');
                    break;
                default:
                    mainSection.classList.add('light-gray-bg');
            }
        }

        function updateStatistics() {
            const input = document.getElementById('qrInput').value;
            document.getElementById('charCount').textContent = input.length;
            
            // Calculate approximate module count based on character count
            let moduleCount = 21; // Base for version 1
            if (input.length > 25) moduleCount = 25;
            if (input.length > 47) moduleCount = 29;
            if (input.length > 77) moduleCount = 33;
            if (input.length > 114) moduleCount = 37;
            
            document.getElementById('moduleCount').textContent = moduleCount;
            
            // Calculate version
            let version = 1;
            if (input.length > 25) version = 2;
            if (input.length > 47) version = 3;
            if (input.length > 77) version = 4;
            if (input.length > 114) version = 5;
            
            document.getElementById('version').textContent = version;
        }

        function generateQR() {
            const input = document.getElementById('qrInput').value;
            if (!input) {
                showNotification('Please enter URL or text', 'error');
                return;
            }
            
            const qrDisplay = document.getElementById('qrDisplay');
            qrDisplay.innerHTML = '';
            
            const size = parseInt(document.getElementById('qrSize').value);
            const qrColor = document.getElementById('qrColor').value;
            const bgColor = document.getElementById('bgColor').value;
            const headline = document.getElementById('qrHeadline').value;
            const errorCorrection = document.getElementById('errorCorrection').value;
            
            // Store QR data
            generatedQRData = {
                text: input,
                size: size,
                color: qrColor,
                background: bgColor,
                headline: headline,
                tool: currentTool
            };
            
            // Show headline if provided
            const headlineDisplay = document.getElementById('headlineDisplay');
            if (headline) {
                headlineDisplay.classList.remove('hidden');
                headlineDisplay.querySelector('h2').textContent = headline;
            } else {
                headlineDisplay.classList.add('hidden');
            }
            
            // Create QR container
            const qrContainer = document.createElement('div');
            qrContainer.id = 'qrcode';
            qrDisplay.appendChild(qrContainer);
            
            // Map error correction levels
            const errorLevels = {
                'L': QRCode.CorrectLevel.L,
                'M': QRCode.CorrectLevel.M,
                'Q': QRCode.CorrectLevel.Q,
                'H': QRCode.CorrectLevel.H
            };
            
            // Generate QR based on tool
            let qrOptions = {
                text: input,
                width: size,
                height: size,
                colorDark: qrColor,
                colorLight: bgColor,
                correctLevel: errorLevels[errorCorrection]
            };
            
            currentQR = new QRCode(qrContainer, qrOptions);
            
            // Apply tool-specific modifications after QR is generated
            setTimeout(() => {
                const qrImage = qrContainer.querySelector('img');
                if (qrImage) {
                    switch(currentTool) {
                        case 'rounded':
                            qrImage.style.borderRadius = '20px';
                            break;
                        case 'dots':
                            qrImage.style.imageRendering = 'pixelated';
                            break;
                        case 'gradient':
                            applyGradientEffect(qrImage, qrColor);
                            break;
                        case 'colorful':
                            applyColorfulEffect(qrImage);
                            break;
                        case 'logo':
                            if (uploadedLogo) {
                                addLogoToQR(qrContainer, qrImage);
                            } else {
                                showNotification('Please upload a logo first', 'error');
                            }
                            break;
                        case 'frame':
                            addFrameToQR(qrContainer);
                            break;
                    }
                }
                
                // Update statistics
                updateStatistics();
                const scanCount = parseInt(localStorage.getItem('scanCount') || '0');
                document.getElementById('scanCount').textContent = scanCount;
            }, 100);
            
            showNotification('QR generated successfully!', 'success');
        }

        function addLogoToQR(container, qrImage) {
            // Create a canvas to combine QR and logo
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = qrImage.width;
            canvas.height = qrImage.height;
            
            // Draw QR code
            ctx.drawImage(qrImage, 0, 0);
            
            // Calculate logo size (20% of QR size)
            const logoSize = canvas.width * 0.2;
            const logoX = (canvas.width - logoSize) / 2;
            const logoY = (canvas.height - logoSize) / 2;
            
            // Create white background for logo
            ctx.fillStyle = 'white';
            ctx.fillRect(logoX - 5, logoY - 5, logoSize + 10, logoSize + 10);
            
            // Draw logo
            const img = new Image();
            img.onload = function() {
                ctx.drawImage(img, logoX, logoY, logoSize, logoSize);
                
                // Replace the QR image with the canvas
                const newImg = document.createElement('img');
                newImg.src = canvas.toDataURL();
                newImg.style.width = qrImage.width + 'px';
                newImg.style.height = qrImage.height + 'px';
                container.innerHTML = '';
                container.appendChild(newImg);
            };
            img.src = uploadedLogo;
        }

        function applyGradientEffect(img, color) {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;
            
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
            gradient.addColorStop(0, color);
            gradient.addColorStop(0.5, adjustColor(color, 40));
            gradient.addColorStop(1, adjustColor(color, -40));
            
            ctx.drawImage(img, 0, 0);
            ctx.globalCompositeOperation = 'source-atop';
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            img.src = canvas.toDataURL();
        }

        function applyColorfulEffect(img) {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;
            
            ctx.drawImage(img, 0, 0);
            
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            for (let i = 0; i < data.length; i += 4) {
                if (data[i] === 0) { // Black pixels
                    const hue = Math.random() * 360;
                    const rgb = hslToRgb(hue / 360, 0.7, 0.5);
                    data[i] = rgb[0];
                    data[i + 1] = rgb[1];
                    data[i + 2] = rgb[2];
                }
            }
            
            ctx.putImageData(imageData, 0, 0);
            img.src = canvas.toDataURL();
        }

        function addFrameToQR(container) {
            const img = container.querySelector('img');
            if (img) {
                img.style.border = '10px solid';
                img.style.borderColor = document.getElementById('qrColor').value;
                img.style.borderRadius = '15px';
            }
        }

        function hslToRgb(h, s, l) {
            let r, g, b;
            if (s === 0) {
                r = g = b = l;
            } else {
                const hue2rgb = (p, q, t) => {
                    if (t < 0) t += 1;
                    if (t > 1) t -= 1;
                    if (t < 1/6) return p + (q - p) * 6 * t;
                    if (t < 1/2) return q;
                    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                    return p;
                };
                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                const p = 2 * l - q;
                r = hue2rgb(p, q, h + 1/3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1/3);
            }
            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
        }

        function adjustColor(color, amount) {
            const num = parseInt(color.replace('#', ''), 16);
            const r = Math.min(255, Math.max(0, (num >> 16) + amount));
            const g = Math.min(255, Math.max(0, ((num >> 8) & 0x00FF) + amount));
            const b = Math.min(255, Math.max(0, (num & 0x0000FF) + amount));
            return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;
        }

        function exportQR(format) {
            if (!currentQR) {
                showNotification('Please generate a QR first', 'error');
                return;
            }
            
            const qrContainer = document.getElementById('qrcode');
            const qrImage = qrContainer.querySelector('img');
            
            if (!qrImage) {
                showNotification('QR not ready yet', 'error');
                return;
            }
            
            // Create a canvas for export
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // Set canvas size
            const headline = document.getElementById('qrHeadline').value;
            if (headline) {
                canvas.width = qrImage.width;
                canvas.height = qrImage.height + 60;
                
                // Set background
                ctx.fillStyle = document.getElementById('bgColor').value;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Draw headline
                ctx.fillStyle = document.getElementById('qrColor').value;
                ctx.font = 'bold 24px Inter';
                ctx.textAlign = 'center';
                ctx.fillText(headline, canvas.width / 2, 30);
                
                // Draw QR
                ctx.drawImage(qrImage, 0, 60);
            } else {
                canvas.width = qrImage.width;
                canvas.height = qrImage.height;
                ctx.fillStyle = document.getElementById('bgColor').value;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(qrImage, 0, 0);
            }
            
            // Export based on format
            if (format === 'svg') {
                // Create SVG
                const svgData = `
                    <svg xmlns="http://www.w3.org/2000/svg" width="${canvas.width}" height="${canvas.height}">
                        <rect width="100%" height="100%" fill="${document.getElementById('bgColor').value}"/>
                        <foreignObject width="100%" height="100%">
                            <img src="${qrImage.src}" width="${canvas.width}" height="${canvas.height}"/>
                        </foreignObject>
                    </svg>
                `;
                const blob = new Blob([svgData], {type: 'image/svg+xml'});
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `qrcode_${Date.now()}.svg`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                showNotification('QR exported as SVG!', 'success');
            } else {
                canvas.toBlob(function(blob) {
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `qrcode_${Date.now()}.${format}`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                    
                    showNotification(`QR exported as ${format.toUpperCase()}!`, 'success');
                }, `image/${format === 'jpg' ? 'jpeg' : format}`);
            }
        }

        function copyQR() {
            if (!currentQR) {
                showNotification('Please generate a QR first', 'error');
                return;
            }
            
            const qrContainer = document.getElementById('qrcode');
            const qrImage = qrContainer.querySelector('img');
            
            if (!qrImage) {
                showNotification('QR not ready yet', 'error');
                return;
            }
            
            // Convert to blob and copy
            fetch(qrImage.src)
                .then(res => res.blob())
                .then(blob => {
                    const item = new ClipboardItem({ 'image/png': blob });
                    navigator.clipboard.write([item]);
                    showNotification('QR copied to clipboard!', 'success');
                })
                .catch(() => {
                    showNotification('Failed to copy QR', 'error');
                });
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `fixed top-24 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300`;
            
            const colors = {
                success: 'bg-green-500 text-white',
                error: 'bg-red-500 text-white',
                info: 'bg-blue-500 text-white'
            };
            
            notification.classList.add(...colors[type].split(' '));
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'} mr-2"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(120%)';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }
    </script>
</body>
</html>